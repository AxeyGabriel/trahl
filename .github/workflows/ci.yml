name: CI

on:
  push:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[noci]') && !contains(github.event.head_commit.message, '[no ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
 
#      - name: Prepare build environment
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y build-essential curl ca-certificates git libssl-dev pkg-config

      - name: Build
        run: |
          cargo build --release

#      - name: Upload build artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: trahl
#          path: target

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      httpbingo:
        image: kennethreitz/httpbin:latest
        ports:
          - 8080:80
    env:
      TEST_HTTPBIN_ADDR: http://localhost:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Cache test resources
        id: test-resources-cache
        uses: actions/cache@v3
        with:
          path: test-resources
          key: test-resources-${{ hashFiles('prepare-test-env.sh') }}

      - name: Prepare test resources
        if: steps.test-resources-cache.outputs.cache-hit != 'true'
        run: |
          chmod +x prepare-test-env.sh
          ./prepare-test-env.sh
      
      - name: Install test dependencies
        run: |
          wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg-release-amd64-static.tar.xz
          sudo cp ffmpeg-*/ffmpeg ffmpeg-*/ffprobe /usr/local/bin/
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests with cargo nextest
        run: |
          RUSTFLAGS="-Awarnings" cargo nextest run --no-fail-fast
